1,	阻塞：进程由于某些原因(等数据，等设备)，提前的，主动的放弃CPU资源。
		
		目的：为提高CPU利用率。

2, 唤醒：等待条件发生。

3，非阻塞：以read 为例，若有数据 ，则正常，无数据，则立即返回特定值（EAGAIN, EWOULDBLOCK）,给出错误宏errno赋值。

		功能：实现轮询模型   --->  忙等待

4，IO 密集型：与用户交互较多  (读写功能)
	CPU密集型：		计算

5，linux  ----->   System  V(solarissy) ，BSD(ios),  整合二者的优点得到 linux

6,		fcntl

	cmd				F_GETFL				F_SETFL
	作用		获取文件状态标志		设置文件状态标志
	第三个参数	无						新文件状态标志
	返回值		失败-1 成功:标志(位图)  失败:-1 成功:0

	#include <stdio.h>
	#include <errno.h>
	#include <fcntl.h>

	int main(void)
	{
		char buf[1024];
		int n;
		int flags;

		flags = fcntl(0, F_GETFL);
		flags = flags | O_NONBLOCK;
		fcntl(0, F_SETFL, flags); 
	again:
		n = read(0, buf, 1024);
		if(n == -1){
			if(errno == EWOULDBLOCK){
				printf("no data...\n");
				sleep(3);
				goto again;
			}else
				return -1;
		}
		write(1, buf, n);

		return 0;
	}

7,		
			库函数IO
	IO		系统调用：默认(阻塞), 非阻塞
			映射

8,
