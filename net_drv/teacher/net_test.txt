1.编译内核，把编译得到的arch/arm/boot/zImage拷贝到tftp服务目录下。
2.设置PC机ip地址为192.168.0.200，开发板ip为192.168.0.100
3.启动开发板到nfs根文件系统。
	启动开发板进入uboot
	printenv查看uboot环境变量
	setenv ipaddr 192.168.0.100
	setenv serverip 192.168.0.200
	setenv bootmode nfs
	setenv nfsroot [nfs服务目录]
	saveenv
	ping 192.168.0.200
	tftp 0x30008000 zImage
	nand erase kernel 
	nand write 0x30008000 kernel 0x200000
	reset
4.制作开发板上的本地文件系统，类型是可读写的yaffs，不能是cramfs（只读）。
注意：PC机上的根文件系统请使用我给你们的rootfs-basic.tar压缩包里的根文件系统。大家用命令解压缩就可以（sudo tar xvf rootfs-basic.tar）
	flash_eraseall /dev/mtd2
	mount -t yaffs /dev/mtdblock2 /mnt
	cp -a bin/ etc/ lib/ linuxrc opt/ sbin/ srv/ usr/ /mnt
	mkdir -p /mnt/dev /mnt/mnt /mnt/proc /mnt/sys /mnt/tmp /mnt/var/run
	ls /dev/console /dev/s3c2410_serial0 /dev/null -l
	cd /mnt/dev/
	ls
	mknod -m 666 console c 5 1
	mknod -m 666 null c 1 3
	mknod -m 666 s3c2410_serial0 c 204 64
	ls -l
	cd /
	umount /mnt
5.设置开发板启动参数，让他启动到本地的yaffs文件系统。
	printenv
	setenv bootmode nand
	setenv root /dev/mtdblock2
	setenv bootargs noinitrd console=ttySAC0,115200
	saveenv
	reset
6.在进入到本地yaffs文件系统后（观察启动信息里是不是有VFS: Mounted root (yaffs filesystem).)这一句，有就说明成功了。
7.进入内核源码包，重新配置内核，关闭内核原来的网卡驱动。
	cd 内核源码目录
	make menuconfig
	在里面关闭网卡驱动:
	Device Drivers
		Network device support
			Ethernet (10 or 100MBit)
				CS8900A Support   把这一行前面的星号，按空格去除掉。
	然后退出，直到提示保存，选yes保存。
	make 
	cp arch/arm/boot/zImage [tftp服务目录]/zImage_nonet
8.重启开发板，倒计时结束前按空格进入uboot
	tftp 0x30008000 zImage_nonet
	nand erase kernel
	nand write 0x30008000 kernel 0x200000
	reset
9.观察开发板启动信息中有“IP-Config: Device `eth0' not found.“， 说明网卡驱动已经关闭。
	ifconfig 或者ifconfig -a都看不到eth0
	rx driver.ko   通过串口拷贝文件driver.ko到开发板上
	insmod driver.ko
	观察插入模块成功，并有“My CS8900 Driver starts to work!”提示信息，说明插入模块成功。
	ifconfig 还是看不到eth0，因为还未打开网卡设备,但是ifconfig -a能看到eth0
	ifconfig eth0 up
	ifconfig直接能看到eth0了
	ifconfig eth0 192.168.0.100
	ping 192.168.0.200 观察能否ping通，能ping通就成功了。
	还可以试试挂载PC机上的nfs服务目录：
	mount -t nfs -o nolock 192.168.0.200:[你的PC机上的NFS服务目录]  /mnt
	ls /mnt  观察是否就是你PC机上的nfs服务目录里的内容。


