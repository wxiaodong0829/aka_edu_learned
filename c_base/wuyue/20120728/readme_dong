1, printf("%d, %d\n", i, i++);  
   2, 1               传参数时，从右向左压栈，先计算最右边的表达式

2, 局部变量，数组越界, 很有可能覆盖了函数的返回地址。
   printf_strcpy.c 中 buf[8]; 越界后，覆盖了main()保存的ebp,和返回地址
   严谨的工程师，用strncpy().
	
3, strcpy(char *dest, char *src), dest, src 不能有重叠部分，否则不能结束，遇到这种情况，先不要下定论，画图，一步一步地运行以下。


4,	ELF	文件解析：

	.text	.data	.rodata		.bss



	_________________
	|	stack栈		|
	|		|		|
	|		|		|
	|		v		|
	|				|
	|				|
	|				|
	|	.bss		|
	|	.data		|
	|	.rodata		|
	|	.text		|
	________________

	1,代码段放在最下面	.text	存代码指令						只读段
	(链接后系统会在.text之下加上.init，添加到此ELF中)
	2,数据段			.data	存全局变量						可读可写
	3,只读数据段		.rodata 存复杂数据，字符常量，浮点数	只读		
	4,块存储段			.bss	存没有被初始化的全局变量的标记 加载到内存后与.data合并可读写
								并无具体空间及内容，
								.bss段,只有当程序真正运行时，才实体
								分配出内存，默认该内存中初始化为 0 

	4.1  栈有限度，有预留空间限制，不会覆盖下面的ELF中各段的内容。
		栈预留空间-->5M~50M		否则segementation fault 段错误
	4.2  大内存块，不应放在栈中，应用 malloc 从堆中动态分配出来。
